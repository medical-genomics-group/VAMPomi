#!/bin/bash
# gvamp 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of model: '$model'"
    echo "Value of data_file: '$data_file'"
    echo "Value of phen_file: '$phen_file'"
    echo "Value of cov_file: '$cov_file'"
    echo "Value of probe_file: '$probe_file'"
    echo "Value of iterations: '$iterations'"
    echo "Value of rho: '$rho'"
    echo "Value of stop_criteria_thr: '$stop_criteria_thr'"
    echo "Value of prior_probs: '$prior_probs'"
    echo "Value of prior_vars: '$prior_vars'"
    echo "Value of out: '$out'"

    data_fname=$(dx ls "${data_file}")
    probe_fname=$(dx ls "${probe_file}")
    phen_fname=$(dx ls "${phen_file}")
    
    dx download "$data_file"
    dx download "$probe_file"
    dx download "$phen_file"
    
    if [ ${cov_file} = ]; then
        C=0
    else
        cov_fname=$(dx ls "${cov_file}")
        dx download "$cov_file"
        C=$(($(awk '{print NF}' ${cov_fname} | sort -nu | tail -n 1) - 2))
    fi

    M=$(wc -l < ${probe_fname})
    N=$(wc -l < ${phen_fname})
    echo "M = "${M}
    echo "N = "${N}
    echo "C = "${C}

    ls -lh
    mkdir estimates

    main=main
    if [ ${model} = "bin_class" ]; then
        main=main_probit
    fi
    args="--model $model --meth-file ${data_fname} --phen-file ${phen_fname} --N ${N} --Mt ${M} --out-dir estimates/ --out-name ${out}"
    if [ ${C} -gt 0 ]; then
        args=$args" --cov-file ${cov_fname} --C ${C}"
    fi

    if [ ${prior_probs} = ]; then
        echo "Default prior"
    else
        L=$(awk -F',' '{print NF}' <<< ${prior_probs})
        args=$args" --probs ${prior_probs} --vars ${prior_vars} --num-mix-comp ${L}"
    fi

    if [ ${stop_criteria_thr} = ]; then
        echo "Default stopping criteria"
    else
        args=$args" --stop-criteria-thr ${stop_criteria_thr}"
    fi

    if [ ${rho} = ]; then
        echo "Default rho"
    else
        args=$args" --rho ${rho}"
    fi

    if [ ${iterations} = ]; then
        echo "Default iterations"
    else
        args=$args" --iterations ${iterations}"
    fi
    
    export OMP_NUM_THREADS=2
    mpiexec -n 4 --allow-run-as-root ${main} $args |& tee -a ${out}.log

    log_file=$(dx upload ${out}.log --brief)

    python3 postprocess.py \
		--probes ${probe_fname} \
        --log ${out}.log \
        --params estimates/${out}_params.csv \
        --out-name ${out} \
        --M ${M} \
        --N ${N}

    ls -lh

    marker_estimates=$(dx upload ${out}.gvamp --brief)
    summary_file=$(dx upload ${out}_summary.csv --brief)

    dx-jobutil-add-output marker_estimates "$marker_estimates" --class=file
    dx-jobutil-add-output log_file "$log_file" --class=file
    dx-jobutil-add-output summary_file "$summary_file" --class=file
}
